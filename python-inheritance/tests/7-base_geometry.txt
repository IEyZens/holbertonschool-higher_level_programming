>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

# ======== TEST DE LA MÉTHODE area() ========
# Doit lever une exception car non implémentée
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# ======== TESTS DE integer_validator ========

# --- Cas valide ---
# Un entier strictement positif ne doit rien lever
>>> bg.integer_validator("width", 10)

# --- Cas non valide : string ---
# Doit lever TypeError car "10" est une string
>>> bg.integer_validator("width", "10")
Traceback (most recent call last):
...
TypeError: width must be an integer

# --- Cas non valide : zéro ---
# Doit lever ValueError car 0 n’est pas strictement positif
>>> bg.integer_validator("width", 0)
Traceback (most recent call last):
...
ValueError: width must be greater than 0

# --- Cas non valide : négatif ---
# Doit lever ValueError car -3 < 0
>>> bg.integer_validator("width", -3)
Traceback (most recent call last):
...
ValueError: width must be greater than 0

# --- Cas non valide : float ---
# Doit lever TypeError car 10.5 n’est pas un int
>>> bg.integer_validator("height", 10.5)
Traceback (most recent call last):
...
TypeError: height must be an integer

# --- Cas non valide : booléen ---
# True est un int en Python, mais ici on ne veut pas l’accepter
>>> bg.integer_validator("width", True)
Traceback (most recent call last):
...
TypeError: width must be an integer

# --- Cas non valide : None ---
>>> bg.integer_validator("size", None)
Traceback (most recent call last):
...
TypeError: size must be an integer

# --- Cas non valide : liste ---
>>> bg.integer_validator("length", [10])
Traceback (most recent call last):
...
TypeError: length must be an integer

# --- Cas non valide : dictionnaire ---
>>> bg.integer_validator("depth", {"value": 5})
Traceback (most recent call last):
...
TypeError: depth must be an integer

# --- Cas non valide : tuple ---
>>> bg.integer_validator("position", (5,))
Traceback (most recent call last):
...
TypeError: position must be an integer

# --- Cas non valide : string vide ---
>>> bg.integer_validator("level", "")
Traceback (most recent call last):
...
TypeError: level must be an integer

# --- Cas non valide : chaîne contenant un chiffre ---
>>> bg.integer_validator("level", "5")
Traceback (most recent call last):
...
TypeError: level must be an integer

# --- Cas non valide : objet custom ---
>>> class Dummy: pass
>>> bg.integer_validator("custom", Dummy())
Traceback (most recent call last):
...
TypeError: custom must be an integer
